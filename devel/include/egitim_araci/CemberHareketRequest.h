// Generated by gencpp from file egitim_araci/CemberHareketRequest.msg
// DO NOT EDIT!


#ifndef EGITIM_ARACI_MESSAGE_CEMBERHAREKETREQUEST_H
#define EGITIM_ARACI_MESSAGE_CEMBERHAREKETREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace egitim_araci
{
template <class ContainerAllocator>
struct CemberHareketRequest_
{
  typedef CemberHareketRequest_<ContainerAllocator> Type;

  CemberHareketRequest_()
    : yaricap(0.0)  {
    }
  CemberHareketRequest_(const ContainerAllocator& _alloc)
    : yaricap(0.0)  {
  (void)_alloc;
    }



   typedef double _yaricap_type;
  _yaricap_type yaricap;





  typedef boost::shared_ptr< ::egitim_araci::CemberHareketRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::egitim_araci::CemberHareketRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CemberHareketRequest_

typedef ::egitim_araci::CemberHareketRequest_<std::allocator<void> > CemberHareketRequest;

typedef boost::shared_ptr< ::egitim_araci::CemberHareketRequest > CemberHareketRequestPtr;
typedef boost::shared_ptr< ::egitim_araci::CemberHareketRequest const> CemberHareketRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::egitim_araci::CemberHareketRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::egitim_araci::CemberHareketRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::egitim_araci::CemberHareketRequest_<ContainerAllocator1> & lhs, const ::egitim_araci::CemberHareketRequest_<ContainerAllocator2> & rhs)
{
  return lhs.yaricap == rhs.yaricap;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::egitim_araci::CemberHareketRequest_<ContainerAllocator1> & lhs, const ::egitim_araci::CemberHareketRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace egitim_araci

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::egitim_araci::CemberHareketRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::egitim_araci::CemberHareketRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::egitim_araci::CemberHareketRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::egitim_araci::CemberHareketRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::egitim_araci::CemberHareketRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::egitim_araci::CemberHareketRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::egitim_araci::CemberHareketRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "534fdc954659adaf837ecd56d547676d";
  }

  static const char* value(const ::egitim_araci::CemberHareketRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x534fdc954659adafULL;
  static const uint64_t static_value2 = 0x837ecd56d547676dULL;
};

template<class ContainerAllocator>
struct DataType< ::egitim_araci::CemberHareketRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "egitim_araci/CemberHareketRequest";
  }

  static const char* value(const ::egitim_araci::CemberHareketRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::egitim_araci::CemberHareketRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 yaricap\n"
;
  }

  static const char* value(const ::egitim_araci::CemberHareketRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::egitim_araci::CemberHareketRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.yaricap);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CemberHareketRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::egitim_araci::CemberHareketRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::egitim_araci::CemberHareketRequest_<ContainerAllocator>& v)
  {
    s << indent << "yaricap: ";
    Printer<double>::stream(s, indent + "  ", v.yaricap);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EGITIM_ARACI_MESSAGE_CEMBERHAREKETREQUEST_H
